#!/usr/bin/env ruby

require 'scout'
require 'scout-ai'
require 'scout/workflow'
require 'scout/knowledge_base'
require 'scout/llm/agent'

$0 = "scout #{$previous_commands.any? ? $previous_commands*" " + " " : "" }#{ File.basename(__FILE__) }" if $previous_commands

options = SOPT.setup <<EOF

Ask GPT

$ #{$0} [<options>] [question]

Use STDIN to add context to the question

-h--help Print this help
-l--log* Log level
-t--template* Use a template
-c--chat* Follow a conversation
-m--model* Model to use
-e--endpoint* Endpoint to use
-f--file* Incorporate file
-wt--workflow_tasks* Export these tasks to the agent
-i--imports* Chat files to import, separated by comma
EOF
if options[:help]
  if defined? scout_usage
    scout_usage 
  else
    puts SOPT.doc
  end
  exit 0
end

Log.severity = options.delete(:log).to_i if options.include? :log

agent_name, *question_parts = ARGV

question = question_parts * " "

file, chat, inline, template, dry_run, imports, endpoint, model = IndiferentHash.process_options options, :file, :chat, :inline, :template, :dry_run, :imports, :endpoint, :model

file = Path.setup(file) if file

imports = imports.split(/,\s*/) if imports

agent_name ||= 'default'

agent_file = Scout.workflows[agent_name]

agent_file = Scout.chats[agent_name] unless agent_file.exists?

agent_file = agent_file.find_with_extension('rb') unless agent_file.exists?


if agent_file.exists?
  if agent_file.directory?
    if agent_file.agent.find_with_extension('rb').exists?
      agent = load agent_file.agent.find_with_extension('rb')
    else
      agent = LLM::Agent.load_from_path agent_file
    end
  else
    agent = load agent_file
  end
else
  #raise ParameterException agent_file
end

agent.other_options[:endpoint] = endpoint if endpoint
agent.other_options[:model] = model if model

if template
  if Open.exists?(template)
    template_question = Open.read(template)
  elsif Scout.questions[template].exists?
    template_question = Scout.questions[template].read
  elsif Scout.chats.system[template].exists?
    template_question = Scout.chats.system[template].read
  elsif Scout.chats[template].exists?
    template_question = Scout.chats[template].read
  end
  if template_question.include?('???')
    question = template_question.sub('???', question)
  elsif not question.empty?
    question = template_question + "\nuser: #{question}"
  else
    question = template_question
  end
end

if question.include?('...')
  context = file ? Open.read(file) : STDIN.read
  question = question.sub('...', context)
elsif file
  question = "<file basename=#{File.basename file}>\n" + Open.read(file) + "\n</file>\n\n" + question
end

if chat
  #conversation = Open.exist?(chat)? LLM.chat(chat) : []
  #convo_options = LLM.options conversation
  #conversation = question.empty? ? conversation : conversation +  LLM.chat(question)

  #if dry_run
  #  ppp LLM.print conversation
  #  exit 0
  #end

  #new = agent.ask(conversation, convo_options.merge(options.merge(return_messages: true)))
  #conversation = Open.read(chat) + LLM.print(new)
  #Open.write(chat, conversation)

  conversation = Open.exist?(chat)? LLM.chat(chat) : []
  convo_options = LLM.options conversation
  agent.start(Chat.setup(conversation)) if conversation.any?
  agent.current_chat.concat LLM.chat(question) if question && ! question.empty?
  imports.each{|import| agent.import import } if imports

  if dry_run
    ppp LLM.print conversation
    exit 0
  end

  new = agent.ask(agent.current_chat, convo_options.merge(options.merge(return_messages: true)))
  conversation += LLM.chat(question) if question
  conversation += new

  Open.open(chat, mode: 'a'){|f| f.puts LLM.print(new) }
  puts LLM.purge(new).last[:content]
elsif inline

  file = Open.read inline

  new_file = ""
  while true
    pre, question, post =
      file.partition(/^\s*#\s*ask:(?:.*?)(?=^\s*[^\s#])/smu)

      break if post.empty?

    new_file << pre
    new_file << question
    clean_question = question.gsub('#', '').gsub(/\s+/,' ').sub(/.*ask:\s*/,'').strip
    chat = [
      {role: :system, content: "Write a succint reply with no commentary and no formatting."},
      {role: :user, content: "Find the following question as a comment in the file give a response to be placed inline: #{question}"},
      LLM.tag('file', file, inline)
    ]
    response = LLM.ask(LLM.chat(chat))
    new_file << <<-EOF
# Response start
#{response}
# Response end
    EOF
    file = post
  end
  new_file << file
  Open.write(inline, new_file)
else
  #conversation = Chat.setup(LLM.chat question)
  #imports.each{|import| conversation.import import } if imports
  #puts agent.ask(conversation, nil, options)
  agent.current_chat.concat LLM.chat(question)
  imports.each{|import| agent.import import } if imports
  puts agent.chat
end
